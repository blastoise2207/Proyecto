{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"capitulo6/","title":"Capitulo 6","text":"<p>La funci\u00f3n gaussiana lleva el nombre de Carl Friedrich Gauss, un matem\u00e1tico, astr\u00f3nomo y f\u00edsico alem\u00e1n que vivi\u00f3 en el siglo XVIII y principios del siglo XIX (1777-1855). Es utilizada en muchos campos, incluyendo el an\u00e1lisis de datos, el procesamiento de se\u00f1ales, la inteligencia artificial y otros \u00e1mbitos cient\u00edficos y t\u00e9cnicos.</p> <p>Es la mas importante para describir una variable aleatoria continua, asi tambien en la inferencia estadistica. Nos ofrece la probabilidad de los resultados de un muestreo.</p> In\u00a0[167]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Par\u00e1metros de la distribuci\u00f3n normal\nmedia = 0\ndesviacion_estandar = 1\n\n# Generar datos de la distribuci\u00f3n normal\nx = np.linspace(media - 3 * desviacion_estandar, media + 3 * desviacion_estandar, 1000)\ny = norm.pdf(x, media, desviacion_estandar)\n\n# Crear la gr\u00e1fica\nfig, ax = plt.subplots()\nax.plot(x, y, color='#009929')\n# Establecer el color de fondo\nax.set_facecolor('#d4f8b7') \nax.fill_between(x, y, color='#5CCB5F', alpha=1) \nfig.patch.set_facecolor('#D4F8B7')\n\n#Configuraci\u00f3n de los ejes\nax.set_xlabel('Media', fontsize=12)\nax.set_ylabel('Densidad de Probabilidad', fontsize=12)\nax.set_xticks([0],['$\\mu$'])\nax.set_yticks([])\n\n# Agregar texto\ninfo_desviacion = 'Desviaci\u00f3n'\nax.text(0.6, 0.85, info_desviacion, transform=ax.transAxes, fontsize=12, color='#000')\ninfo_desviacion = 'estandar $\\sigma$'\nax.text(0.7, 0.8, info_desviacion, transform=ax.transAxes, fontsize=12, color='#000')\n\n#Mostrar grafico\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt  # Par\u00e1metros de la distribuci\u00f3n normal media = 0 desviacion_estandar = 1  # Generar datos de la distribuci\u00f3n normal x = np.linspace(media - 3 * desviacion_estandar, media + 3 * desviacion_estandar, 1000) y = norm.pdf(x, media, desviacion_estandar)  # Crear la gr\u00e1fica fig, ax = plt.subplots() ax.plot(x, y, color='#009929') # Establecer el color de fondo ax.set_facecolor('#d4f8b7')  ax.fill_between(x, y, color='#5CCB5F', alpha=1)  fig.patch.set_facecolor('#D4F8B7')  #Configuraci\u00f3n de los ejes ax.set_xlabel('Media', fontsize=12) ax.set_ylabel('Densidad de Probabilidad', fontsize=12) ax.set_xticks([0],['$\\mu$']) ax.set_yticks([])  # Agregar texto info_desviacion = 'Desviaci\u00f3n' ax.text(0.6, 0.85, info_desviacion, transform=ax.transAxes, fontsize=12, color='#000') info_desviacion = 'estandar $\\sigma$' ax.text(0.7, 0.8, info_desviacion, transform=ax.transAxes, fontsize=12, color='#000')  #Mostrar grafico plt.show() FUNCI\u00d3N DE DENSIDAD DE PROBABILIDAD NORMAL                  $$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}} e^{-\\frac{(x - \\mu)^2}{2\\sigma^2}} $$              (6.2) \"$f$ de $x$ es igual a uno dividido por el producto de la desviaci\u00f3n ($\\sigma$) multiplicada por la ra\u00edz cuadrada de dos veces pi, multiplicado por la exponencial ($e$) de la expresi\u00f3n negativa de la diferencia entre $x$ y la media ($\\mu$) al cuadrado, dividido por dos veces la desviaci\u00f3n al cuadrado.\"         Donde:  <ul> <li>$\\mu$ = media</li> <li>$\\sigma$ = desviaci\u00f3n est\u00e1ndar</li> <li>$\\pi$ = 3.14159</li> <li>$e$ = 2.71828</li></ul> <p>Se formulan varias observaciones acerca de sus caracter\u00edsticas.</p> <ol> <li>Se diferencia por medio de dos par\u00e1metros: la media \u03bc y la desviaci\u00f3n est\u00e1ndar \u03c3.</li> <li>El punto m\u00e1s alto de una campana de gauss se encuentra sobre la media, el cual coincide con la mediana.</li> <li>La media de una distribuci\u00f3n normal puede tener cualquier valor num\u00e9rico: negativo, cero o positivo.</li> </ol> <p>En el siguiente grafico se muestra tres distribuciones normales con diferentes medias.</p> In\u00a0[156]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Funci\u00f3n para la densidad de probabilidad de la distribuci\u00f3n normal\ndef normal_distribution(x, mean, std_dev):\n    return (1 / (std_dev * np.sqrt(2 * np.pi))) * np.exp(-((x - mean)**2) / (2 * std_dev**2))\n\n# Datos de las curvas normales\nparams = [(0, 5), (-7, 5), (14, 5)]\n\n# Generar datos x para el gr\u00e1fico\nx = np.linspace(-30, 30, 1000)\n\n# Crear el gr\u00e1fico\nfig, ax = plt.subplots()\n\nfor mean, std_dev in params:\n    y = normal_distribution(x, mean, std_dev)\n    ax.plot(x, y, color='#009929', label=f'Media {mean}, Desviaci\u00f3n {std_dev}')\n    ax.fill_between(x, y, color='#5CCB5F', alpha=1)\n\n# Configurar color de fondo\nfig.patch.set_facecolor('#D4F8B7')\nax.set_facecolor('#d4f8b7') \n\n#Configuraci\u00f3n de los ejes\nax.set_xticks([mean for mean, _ in params])\nax.set_xticklabels([str(mean) for mean, _ in params])\nplt.subplots_adjust(bottom=0.5)\nax.set_yticks([])\n\n# Mostrar el gr\u00e1fico\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt  # Funci\u00f3n para la densidad de probabilidad de la distribuci\u00f3n normal def normal_distribution(x, mean, std_dev):     return (1 / (std_dev * np.sqrt(2 * np.pi))) * np.exp(-((x - mean)**2) / (2 * std_dev**2))  # Datos de las curvas normales params = [(0, 5), (-7, 5), (14, 5)]  # Generar datos x para el gr\u00e1fico x = np.linspace(-30, 30, 1000)  # Crear el gr\u00e1fico fig, ax = plt.subplots()  for mean, std_dev in params:     y = normal_distribution(x, mean, std_dev)     ax.plot(x, y, color='#009929', label=f'Media {mean}, Desviaci\u00f3n {std_dev}')     ax.fill_between(x, y, color='#5CCB5F', alpha=1)  # Configurar color de fondo fig.patch.set_facecolor('#D4F8B7') ax.set_facecolor('#d4f8b7')   #Configuraci\u00f3n de los ejes ax.set_xticks([mean for mean, _ in params]) ax.set_xticklabels([str(mean) for mean, _ in params]) plt.subplots_adjust(bottom=0.5) ax.set_yticks([])  # Mostrar el gr\u00e1fico plt.show() <ol> <li>La distribuci\u00f3n normal es sim\u00e9trica: la forma de la curva normal a la izquierda de la media es igual a la forma de la curva a la derecha. Los extremos de la curva normal se extienden hacia el infinito en ambas direcciones.</li> <li>El valor de $\\sigma$ (desviacion estandar) determina la forma de la curva normal, a mayor valor, este sera mas ancha y plana.</li> </ol> <p>En el siguiente grafico se observan dos distribuciones nomales con diferentes desviaciones estandar.</p> In\u00a0[161]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Par\u00e1metros de las curvas normales\nparams = [(0, 9, '$\\sigma = 9$', (4, 0.07, 20, 0.08)),\n          (0, 4, '$\\sigma = 4$', (12, 0.02, 20, 0.03))]\n\n# Generar datos para los ejes x\nx = np.linspace(-30, 30, 1000)\n\n# Crear el gr\u00e1fico\nfig, ax = plt.subplots(figsize=(8, 5))\n\nfor mean, std_dev, label, arrow_props in params:\n    y = norm.pdf(x, mean, std_dev)\n    ax.plot(x, y, color='#009929', label=f'Media=0, Desviaci\u00f3n={std_dev}')\n    ax.fill_between(x, y, color='#5CCB5F', alpha=1)\n\n    # Agregar texto con una flecha\n    ax.annotate(label, xy=arrow_props[:2], xytext=arrow_props[2:], arrowprops=dict(facecolor='black', shrink=0.05, width=0.2, headwidth=5),\n                 fontsize=10, ha='center', va='center')\n\n# Configurar color de fondo de la figura\nfig.set_facecolor('#D4F8B7')\nax.set_facecolor('#d4f8b7')\n\n#Configuraci\u00f3n de los ejes\nax.set_yticks([])\nax.set_xticks([0],['$\\mu$'])\nplt.subplots_adjust(bottom=0.3)\n\n# Mostrar el gr\u00e1fico\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt  # Par\u00e1metros de las curvas normales params = [(0, 9, '$\\sigma = 9$', (4, 0.07, 20, 0.08)),           (0, 4, '$\\sigma = 4$', (12, 0.02, 20, 0.03))]  # Generar datos para los ejes x x = np.linspace(-30, 30, 1000)  # Crear el gr\u00e1fico fig, ax = plt.subplots(figsize=(8, 5))  for mean, std_dev, label, arrow_props in params:     y = norm.pdf(x, mean, std_dev)     ax.plot(x, y, color='#009929', label=f'Media=0, Desviaci\u00f3n={std_dev}')     ax.fill_between(x, y, color='#5CCB5F', alpha=1)      # Agregar texto con una flecha     ax.annotate(label, xy=arrow_props[:2], xytext=arrow_props[2:], arrowprops=dict(facecolor='black', shrink=0.05, width=0.2, headwidth=5),                  fontsize=10, ha='center', va='center')  # Configurar color de fondo de la figura fig.set_facecolor('#D4F8B7') ax.set_facecolor('#d4f8b7')  #Configuraci\u00f3n de los ejes ax.set_yticks([]) ax.set_xticks([0],['$\\mu$']) plt.subplots_adjust(bottom=0.3)  # Mostrar el gr\u00e1fico plt.show() <ol> <li>Las probabilidades para la variable aleatoria normal est\u00e1n representadas por las \u00e1reas bajo la curva. El \u00e1rea total bajo la curva es 1. Como es sim\u00e9trica, el \u00e1rea bajo la curva a la izquierda como a la derecha es 0.50.</li> <li>Los porcentajes de los valores en algunos intervalos de uso com\u00fan son los siguientes.</li> </ol> <p>$$a.\\quad 68.3%$$ $$b.\\quad 95.4%$$ $$c.\\quad 99.7%$$</p> <p>La figura 6.4 muestra las propiedades a, b y c.</p> <p> Figura 6.4 \u00c1reas bajo la curva de cualquier distribuci\u00f3n normal</p> In\u00a0[168]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Par\u00e1metros de la curva normal\nmedia = 0\ndesviacion = 10\nescala_curva = 0.5\n\n# Generar datos para el eje x\nx = np.linspace(media - 4 * desviacion, media + 4 * desviacion, 1000)\n\n# Calcular los valores de la distribuci\u00f3n normal\ny = norm.pdf(x, media, desviacion)\n\n# Calcular los valores de la distribuci\u00f3n normal y ajustar la escala\ny = escala_curva * norm.pdf(x, media, desviacion)\n\n# Crear el gr\u00e1fico y cambiar color de fondo\nfig, ax = plt.subplots(figsize=(8, 5))\nax.plot(x, y,color='#009929')\nfig.set_facecolor('#D4F8B7')\nax.set_facecolor('#D4F8B7')\nax.fill_between(x, y, color='#5CCB5F', alpha=1)\n\n# A\u00f1adir una l\u00ednea vertical en coordenadas personalizadas\nplt.axvline(x=media-3*desviacion, ymin=0, ymax=0.85, color='black', linestyle='-', linewidth=1)\nplt.axvline(x=media+3*desviacion, ymin=0, ymax=0.85, color='black', linestyle='-', linewidth=1)\n\nplt.axvline(x=media-2*desviacion, ymin=0, ymax=0.75, color='black', linestyle='-', linewidth=1)\nplt.axvline(x=media+2*desviacion, ymin=0, ymax=0.75, color='black', linestyle='-', linewidth=1)\n\nplt.axvline(x=media-1*desviacion, ymin=0, ymax=0.6, color='black', linestyle='-', linewidth=1)\nplt.axvline(x=media+1*desviacion, ymin=0, ymax=0.6, color='black', linestyle='-', linewidth=1)\n\n# Agregar flechas\nax.annotate('',\n            xy=(media-3*desviacion, 0.032),\n            xytext=(media+3*desviacion, 0.032),\n            arrowprops=dict(arrowstyle='&lt;-&gt;', color='black', lw=1),\n            )\n\n# Agregar texto\nax.text(media, 0.033, '99.7%', ha='center', va='center', color='black')\n\nax.annotate('',\n            xy=(media-2*desviacion, 0.028),\n            xytext=(media+2*desviacion, 0.028),\n            arrowprops=dict(arrowstyle='&lt;-&gt;', color='black', lw=1),\n            )\n\n# Agregar texto\nax.text(media, 0.029, '95.4%', ha='center', va='center', color='black')\n\nax.annotate('',\n            xy=(media-1*desviacion, 0.022),\n            xytext=(media+1*desviacion, 0.022),\n            arrowprops=dict(arrowstyle='&lt;-&gt;', color='black', lw=1),\n            )\n\n# Agregar texto\nax.text(media, 0.023, '68.3%', ha='center', va='center', color='black')\n\n# Ajustar las marcas del eje x\nmarcas_x = [media - 3 * desviacion, media - 2 * desviacion, media - desviacion,\n            media, media + desviacion, media + 2 * desviacion, media + 3 * desviacion]\nmarcas_etiquetas = [r'$\\mu - 3\\sigma$', r'$\\mu - 2\\sigma$', r'$\\mu - 1\\sigma$', r'$\\mu$',\n                    r'$\\mu + 1\\sigma$', r'$\\mu + 2\\sigma$', r'$\\mu + 3\\sigma$']\n\n#Configuraci\u00f3n de los ejes\nax.set_xticks(marcas_x)\nax.set_yticks([])\nax.set_xticklabels(marcas_etiquetas)\nplt.ylim(top=0.04)\n\n# Mostrar el gr\u00e1fico\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt  # Par\u00e1metros de la curva normal media = 0 desviacion = 10 escala_curva = 0.5  # Generar datos para el eje x x = np.linspace(media - 4 * desviacion, media + 4 * desviacion, 1000)  # Calcular los valores de la distribuci\u00f3n normal y = norm.pdf(x, media, desviacion)  # Calcular los valores de la distribuci\u00f3n normal y ajustar la escala y = escala_curva * norm.pdf(x, media, desviacion)  # Crear el gr\u00e1fico y cambiar color de fondo fig, ax = plt.subplots(figsize=(8, 5)) ax.plot(x, y,color='#009929') fig.set_facecolor('#D4F8B7') ax.set_facecolor('#D4F8B7') ax.fill_between(x, y, color='#5CCB5F', alpha=1)  # A\u00f1adir una l\u00ednea vertical en coordenadas personalizadas plt.axvline(x=media-3*desviacion, ymin=0, ymax=0.85, color='black', linestyle='-', linewidth=1) plt.axvline(x=media+3*desviacion, ymin=0, ymax=0.85, color='black', linestyle='-', linewidth=1)  plt.axvline(x=media-2*desviacion, ymin=0, ymax=0.75, color='black', linestyle='-', linewidth=1) plt.axvline(x=media+2*desviacion, ymin=0, ymax=0.75, color='black', linestyle='-', linewidth=1)  plt.axvline(x=media-1*desviacion, ymin=0, ymax=0.6, color='black', linestyle='-', linewidth=1) plt.axvline(x=media+1*desviacion, ymin=0, ymax=0.6, color='black', linestyle='-', linewidth=1)  # Agregar flechas ax.annotate('',             xy=(media-3*desviacion, 0.032),             xytext=(media+3*desviacion, 0.032),             arrowprops=dict(arrowstyle='&lt;-&gt;', color='black', lw=1),             )  # Agregar texto ax.text(media, 0.033, '99.7%', ha='center', va='center', color='black')  ax.annotate('',             xy=(media-2*desviacion, 0.028),             xytext=(media+2*desviacion, 0.028),             arrowprops=dict(arrowstyle='&lt;-&gt;', color='black', lw=1),             )  # Agregar texto ax.text(media, 0.029, '95.4%', ha='center', va='center', color='black')  ax.annotate('',             xy=(media-1*desviacion, 0.022),             xytext=(media+1*desviacion, 0.022),             arrowprops=dict(arrowstyle='&lt;-&gt;', color='black', lw=1),             )  # Agregar texto ax.text(media, 0.023, '68.3%', ha='center', va='center', color='black')  # Ajustar las marcas del eje x marcas_x = [media - 3 * desviacion, media - 2 * desviacion, media - desviacion,             media, media + desviacion, media + 2 * desviacion, media + 3 * desviacion] marcas_etiquetas = [r'$\\mu - 3\\sigma$', r'$\\mu - 2\\sigma$', r'$\\mu - 1\\sigma$', r'$\\mu$',                     r'$\\mu + 1\\sigma$', r'$\\mu + 2\\sigma$', r'$\\mu + 3\\sigma$']  #Configuraci\u00f3n de los ejes ax.set_xticks(marcas_x) ax.set_yticks([]) ax.set_xticklabels(marcas_etiquetas) plt.ylim(top=0.04)  # Mostrar el gr\u00e1fico plt.show() <p> Figura 6.5 Distribuci\u00f3n normal estandar</p> In\u00a0[170]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Par\u00e1metros de la curva normal\nmedia = 0\ndesviacion = 1\n\n# Generar datos para el eje x\nx = np.linspace(media - 4 * desviacion, media + 4 * desviacion, 1000)\n\n# Calcular los valores de la distribuci\u00f3n normal\ny = norm.pdf(x, media, desviacion)\n\n# Crear el gr\u00e1fico y cambiar color de fondo\nfig, ax = plt.subplots(figsize=(8, 5))\nax.plot(x, y, color='#009929')\nfig.set_facecolor('#D4F8B7')\nax.set_facecolor('#D4F8B7')\nax.fill_between(x, y, color='#5CCB5F', alpha=1)\n\n#Configuraci\u00f3n de los ejes\nax.text(1.3, 0.23, '$\\sigma = 1$')\nax.set_xticks([media])\nax.set_yticks([])\nax.set_xticklabels(['0'])\nplt.subplots_adjust(bottom=0.3)\n\n# Mostrar el gr\u00e1fico\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt  # Par\u00e1metros de la curva normal media = 0 desviacion = 1  # Generar datos para el eje x x = np.linspace(media - 4 * desviacion, media + 4 * desviacion, 1000)  # Calcular los valores de la distribuci\u00f3n normal y = norm.pdf(x, media, desviacion)  # Crear el gr\u00e1fico y cambiar color de fondo fig, ax = plt.subplots(figsize=(8, 5)) ax.plot(x, y, color='#009929') fig.set_facecolor('#D4F8B7') ax.set_facecolor('#D4F8B7') ax.fill_between(x, y, color='#5CCB5F', alpha=1)  #Configuraci\u00f3n de los ejes ax.text(1.3, 0.23, '$\\sigma = 1$') ax.set_xticks([media]) ax.set_yticks([]) ax.set_xticklabels(['0']) plt.subplots_adjust(bottom=0.3)  # Mostrar el gr\u00e1fico plt.show() <p>como $\u03bc=0$ y $\\sigma=1$, la f\u00f3rmula para la funci\u00f3n de densidad de probabilidad normal est\u00e1ndar es la siguiente.</p> FUNCION DE DENSIDAD NORMAL ESTANDAR                  $$ f(z) = \\frac{1}{\\sqrt{2\\pi}} e^{-\\frac{z^2}{2}} $$              <p>Para encontrar la probabilidad de que una variable aleatoria normal, debe calcularse el \u00e1rea bajo la curva normal del intervalo obtenido.</p> <p>Para la distribuci\u00f3n normal est\u00e1ndar, las \u00e1reas bajo la curva normal ya se han estimado y est\u00e1n disponibles en tablas que se utilizan para el c\u00e1lculo de probabilidades.</p> <p>Los tres tipos de probabilidades que se necesita calcular incluyen la probabilidad de que: ($z \\leq x$), ($x_1\\leq z \\leq x_2$) o ($x\\leq z$).</p> <p>Para saber como hacer uso de la tabla de probabilidad acumulada de la distribucion normal se emplea el siguiente ejemplo:</p> <p>Primero se mostrar\u00e1 c\u00f3mo calcular la probabilidad de que $z$ sea menor o igual que 0.70, esta situada en el \u00e1rea bajo la curva normal a la izquierda de $z$ = 0.70 en la gr\u00e1fica siguiente.</p> In\u00a0[171]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n# Par\u00e1metros de la curva normal\nmedia = 0\ndesviacion = 1\n\n# Generar datos para el eje x\nx = np.linspace(media - 4 * desviacion, media + 4 * desviacion, 1000)\n\n# Calcular los valores de la distribuci\u00f3n normal\ny = norm.pdf(x, media, desviacion)\n\n# Crear el gr\u00e1fico y cambiar color de fondo\nfig, ax = plt.subplots(figsize=(8, 5))\nax.plot(x, y, color='#009929')\nfig.set_facecolor('#D4F8B7')\nax.set_facecolor('#D4F8B7')\n\n# Dibujar la l\u00ednea vertical\narea_limite = 0.755\nx_limite = norm.ppf(area_limite, media, desviacion)\nax.axvline(x_limite, ymin=0.045, ymax=area_limite, color='#009929', linestyle='-')\n\n# Configuraci\u00f3n del texto y la flecha\ncoordenadas_texto1 = (-0.5, 0.25)\nax.annotate('$P(z \\leq 0.70)$',\n             xy=coordenadas_texto1,\n             xytext=(-1.8, 0.3),\n             arrowprops=dict(facecolor='#009929', shrink=0.05, width=0.2, headwidth=4),\n             fontsize=10,\n             ha='center',\n             va='center'\n            )\n\n# Configuraci\u00f3n general del gr\u00e1fico\nax.fill_between(x, y, where=(x &gt;= x_limite), color='#98F84A', alpha=0.7)\nax.fill_between(x, y, where=(x &lt;= x_limite), color='#5CCB5F', alpha=1)\n\n#Ejes\nax.set_yticks([])\nax.set_xticks([0, x_limite])\nax.set_xticklabels(['0', '0.7'])\n\n# Mostrar la gr\u00e1fica\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt # Par\u00e1metros de la curva normal media = 0 desviacion = 1  # Generar datos para el eje x x = np.linspace(media - 4 * desviacion, media + 4 * desviacion, 1000)  # Calcular los valores de la distribuci\u00f3n normal y = norm.pdf(x, media, desviacion)  # Crear el gr\u00e1fico y cambiar color de fondo fig, ax = plt.subplots(figsize=(8, 5)) ax.plot(x, y, color='#009929') fig.set_facecolor('#D4F8B7') ax.set_facecolor('#D4F8B7')  # Dibujar la l\u00ednea vertical area_limite = 0.755 x_limite = norm.ppf(area_limite, media, desviacion) ax.axvline(x_limite, ymin=0.045, ymax=area_limite, color='#009929', linestyle='-')  # Configuraci\u00f3n del texto y la flecha coordenadas_texto1 = (-0.5, 0.25) ax.annotate('$P(z \\leq 0.70)$',              xy=coordenadas_texto1,              xytext=(-1.8, 0.3),              arrowprops=dict(facecolor='#009929', shrink=0.05, width=0.2, headwidth=4),              fontsize=10,              ha='center',              va='center'             )  # Configuraci\u00f3n general del gr\u00e1fico ax.fill_between(x, y, where=(x &gt;= x_limite), color='#98F84A', alpha=0.7) ax.fill_between(x, y, where=(x &lt;= x_limite), color='#5CCB5F', alpha=1)  #Ejes ax.set_yticks([]) ax.set_xticks([0, x_limite]) ax.set_xticklabels(['0', '0.7'])  # Mostrar la gr\u00e1fica plt.show() <p>La probabilidad que corresponde a ($z \\leq$ 0.70) es el valor ubicado en la intersecci\u00f3n de la fila en la columna izquierda, cuyo encabezado es 0.7 y la columna en la fila superior, cuyo encabezado es 0.00 .</p> <p>Estas se intersecan en el valor 0.7580; por tanto, $P$($z \\leq$ 0.70)= 0.7580.</p> <p>Tabla 6.1  Distribuci\u00f3n de probabilidad normal estandar</p> z 0.00 0.01 0.02 ... 0.6 0.7258 0.7291 0.7324 0.7 0.7580 0.7611 0.7642 0.8 0.7881 0.7910 0.7939 0.9 0.8159 0.8186 0.8212 ... <p>Para ilustrar el segundo tipo de c\u00e1lculo de la probabilidad, suponga que se quiere determina la probabilidad de que $z$ est\u00e9 en el intervalo entre -0.50 y 1.25; es decir, $P$(-0.50 $\\le z \\le$ 1.25). La gr\u00e1fica siguiente muestra esta \u00e1rea, o probabilidad.</p> In\u00a0[172]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nimport matplotlib.patches as patches\nx = np.arange(-2.9, 2.9, 0.001)\n\n#pintar el fondo externo del grafico\nplt.figure(facecolor='#D4F8B7')\n\n#area de sombreado rango\nx_filtered = x[(x &gt;= -0.50) &amp; (x &lt;= 1.25)]\n\n#pintar la linea curva del grafico\nplt.plot(x, norm.pdf(x, 0, 1), linewidth = 2, color = '#000')\n\n#pintar el area sombreada del grafico y graficar\nplt.fill_between(x_filtered, norm.pdf(x_filtered, 0, 1), color='#5CCB5F', alpha=1, edgecolor='black')\n\n#a\u00f1adir texto al grafico\nplt.text(-2.8, 0.20, (\"P(z &lt; -0.50)\"))\nplt.text(3, 0, (\"z\"))\n\n#bordes del grafico\nax = plt.gca()\nax.spines['top'].set_color('#009929')\nax.spines['top'].set_linewidth(2)\n#ancho del borde superior\nax.spines['top'].set_bounds(-4.5, 4.5)\nax.spines['bottom'].set_color('#009929')\nax.spines['bottom'].set_linewidth(2)\n#ancho del borde inferior\nax.spines['bottom'].set_bounds(-4.5, 4.5)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n#pintar el fondo interno del grafico\nax.set_facecolor('#D4F8B7')\n\n#linea inferior del grafico\nplt.plot(x, [0]*len(x), color='black', linewidth=2)\n\n#centrar el grafico\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\n\n#plt.arrow(0.1, 0.1, 0.2, 0.2, width=0.05, color='black')\n\n#flecha\nplt.annotate(\" \", xytext = (-2, 0.2), xy = (-1, 0.05), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),\n             horizontalalignment = 'center')\n\n#texto con flecha\nplt.annotate(\"P(-0.50 \\u2264 z \\u2264 1.25)\", xytext = (2.5, 0.25),\n             xy = (0.5, 0.15), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),\n             horizontalalignment = 'center')\n\n#mostrar ejes x, y\nplt.xticks([-0.50, 0, 1.25])\nplt.yticks([])\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm import matplotlib.patches as patches x = np.arange(-2.9, 2.9, 0.001)  #pintar el fondo externo del grafico plt.figure(facecolor='#D4F8B7')  #area de sombreado rango x_filtered = x[(x &gt;= -0.50) &amp; (x &lt;= 1.25)]  #pintar la linea curva del grafico plt.plot(x, norm.pdf(x, 0, 1), linewidth = 2, color = '#000')  #pintar el area sombreada del grafico y graficar plt.fill_between(x_filtered, norm.pdf(x_filtered, 0, 1), color='#5CCB5F', alpha=1, edgecolor='black')  #a\u00f1adir texto al grafico plt.text(-2.8, 0.20, (\"P(z &lt; -0.50)\")) plt.text(3, 0, (\"z\"))  #bordes del grafico ax = plt.gca() ax.spines['top'].set_color('#009929') ax.spines['top'].set_linewidth(2) #ancho del borde superior ax.spines['top'].set_bounds(-4.5, 4.5) ax.spines['bottom'].set_color('#009929') ax.spines['bottom'].set_linewidth(2) #ancho del borde inferior ax.spines['bottom'].set_bounds(-4.5, 4.5) ax.spines['right'].set_visible(False) ax.spines['left'].set_visible(False)  #pintar el fondo interno del grafico ax.set_facecolor('#D4F8B7')  #linea inferior del grafico plt.plot(x, [0]*len(x), color='black', linewidth=2)  #centrar el grafico plt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)  #plt.arrow(0.1, 0.1, 0.2, 0.2, width=0.05, color='black')  #flecha plt.annotate(\" \", xytext = (-2, 0.2), xy = (-1, 0.05), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),              horizontalalignment = 'center')  #texto con flecha plt.annotate(\"P(-0.50 \\u2264 z \\u2264 1.25)\", xytext = (2.5, 0.25),              xy = (0.5, 0.15), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),              horizontalalignment = 'center')  #mostrar ejes x, y plt.xticks([-0.50, 0, 1.25]) plt.yticks([]) plt.show() <p>Se requieren tres pasos:</p> <p>Primero se encuentra el area a la izquierda de $z$ = 1.25.</p> <p>Segundo se obtiene el area bajo la curva izquierda de $z$ = -0.50.</p> <p>Por ultimo se resta el area a la izquierda de $z$ = -0.50, del area a la izquierda de $z$ = 1.25 para obtener $P$(-0.50 $\\le z \\le$ 1.25).</p> <p>En el ejemplo, para $z$ = 1.25, se localiza el valor en la fila 1.2 y columna 0.05 de la tabla, resultando en un valor de 0.8944. Esto significa que la probabilidad de que ($z \\le$ 1.25) = 0.8944. De manera similar, para $z$ = -0.50, se encuentra el valor en la fila -0.5 y columna 0.00, siendo 0.3085, lo que indica que la probabilidad de que ($z \\le$ -0.50) = 0.3085. Luego, se calcula la probabilidad de que $z$ est\u00e9 entre (-0.50 $\\le z \\le$ 1.25) restando las dos probabilidades obtenidas, resultando en 0.5859.</p> <p>Ejemplo</p> <p>Suponga que queremos calcular la probabilidad de que la variable aleatoria normal est\u00e1ndar est\u00e9 dentro de una desviaci\u00f3n est\u00e1ndar de la media; es decir, $P$(-1.00 $\\le z \\le$ 1.00). Para ello, primero se obtiene el \u00e1rea bajo la curva entre -1.00 y 1.00. Antes se encontr\u00f3 que $P$($z \\le$ 1.00) = 0.8413. Se ve que el \u00e1rea bajo la curva a la izquierda de $z$ = -1.00 es 0.1587; por tanto $P$($z \\le$ -1.00) = 0.1587. De ah\u00ed que $P$(-1.00 $\\le z \\le$ 1.00) = $P$($z \\le$ 1.00)$ - P$($z \\le$ -1.00) = 0.8413 - 0.1587 = 0.6826. Esta probabilidad se muestra gr\u00e1ficamente en la figura siguiente.</p> In\u00a0[8]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nimport matplotlib.patches as patches\nx = np.arange(-2.9, 2.9, 0.001)\n\n#pintar el fondo externo del grafico\nplt.figure(facecolor='#D4F8B7')\n\n\n#tama\u00f1o del grafico\n#plt.figure(figsize=(6,4))\n\n\n#area de sombreado rango\nx_filtered = x[(x &gt;= -1.00) &amp; (x &lt;= 1.00)]\n\n#pintar la linea curva del grafico\nplt.plot(x, norm.pdf(x, 0, 1), linewidth = 2, color = '#000')\n\n#pintar el area sombreada del grafico y graficar\nplt.fill_between(x_filtered, norm.pdf(x_filtered, 0, 1), color='#5CCB5F', alpha=1, edgecolor='black')\n\n#a\u00f1adir texto al grafico\nplt.text(-2.8, 0.20, (\"P(z \\u2264 -0.50) \\n= 0.1587\"))\nplt.text(3, 0, (\"z\"))\n\n#bordes del grafico\nax = plt.gca()\nax.spines['top'].set_color('#009929')\nax.spines['top'].set_linewidth(2)\n#ancho del borde superior\nax.spines['top'].set_bounds(-4.5, 4.5)\nax.spines['bottom'].set_color('#009929')\nax.spines['bottom'].set_linewidth(2)\n#ancho del borde inferior\nax.spines['bottom'].set_bounds(-4.5, 4.5)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n#pintar el fondo interno del grafico\nax.set_facecolor('#D4F8B7')\n\n#linea inferior del grafico\nplt.plot(x, [0]*len(x), color='black', linewidth=2)\n\n#centrar el grafico\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\n\n#plt.arrow(0.1, 0.1, 0.2, 0.2, width=0.05, color='black')\n\n#flecha\nplt.annotate(\" \", xytext = (-2, 0.2), xy = (-1.25, 0.10), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),\n             horizontalalignment = 'center')\n\n#texto con flecha\nplt.annotate(\"P(-1.00 \\u2264 z \\u2264 1.00) \\n= 0.8413 - 01587 = 0.6826\", xytext = (2.5, 0.25),\n             xy = (0.5, 0.15), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),\n             horizontalalignment = 'center')\n\n#mostrar ejes x, y\nplt.xticks([-1, 0, 1], ['{:.2f}'.format(i) for i in [-1, 0, 1]])\nplt.yticks([])\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm import matplotlib.patches as patches x = np.arange(-2.9, 2.9, 0.001)  #pintar el fondo externo del grafico plt.figure(facecolor='#D4F8B7')   #tama\u00f1o del grafico #plt.figure(figsize=(6,4))   #area de sombreado rango x_filtered = x[(x &gt;= -1.00) &amp; (x &lt;= 1.00)]  #pintar la linea curva del grafico plt.plot(x, norm.pdf(x, 0, 1), linewidth = 2, color = '#000')  #pintar el area sombreada del grafico y graficar plt.fill_between(x_filtered, norm.pdf(x_filtered, 0, 1), color='#5CCB5F', alpha=1, edgecolor='black')  #a\u00f1adir texto al grafico plt.text(-2.8, 0.20, (\"P(z \\u2264 -0.50) \\n= 0.1587\")) plt.text(3, 0, (\"z\"))  #bordes del grafico ax = plt.gca() ax.spines['top'].set_color('#009929') ax.spines['top'].set_linewidth(2) #ancho del borde superior ax.spines['top'].set_bounds(-4.5, 4.5) ax.spines['bottom'].set_color('#009929') ax.spines['bottom'].set_linewidth(2) #ancho del borde inferior ax.spines['bottom'].set_bounds(-4.5, 4.5) ax.spines['right'].set_visible(False) ax.spines['left'].set_visible(False)  #pintar el fondo interno del grafico ax.set_facecolor('#D4F8B7')  #linea inferior del grafico plt.plot(x, [0]*len(x), color='black', linewidth=2)  #centrar el grafico plt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)  #plt.arrow(0.1, 0.1, 0.2, 0.2, width=0.05, color='black')  #flecha plt.annotate(\" \", xytext = (-2, 0.2), xy = (-1.25, 0.10), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),              horizontalalignment = 'center')  #texto con flecha plt.annotate(\"P(-1.00 \\u2264 z \\u2264 1.00) \\n= 0.8413 - 01587 = 0.6826\", xytext = (2.5, 0.25),              xy = (0.5, 0.15), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),              horizontalalignment = 'center')  #mostrar ejes x, y plt.xticks([-1, 0, 1], ['{:.2f}'.format(i) for i in [-1, 0, 1]]) plt.yticks([]) plt.show() <p>suponga que se quiere determinar la probabilidad de obtener un valor $z$ por lo menos igual a 1.58; es decir, $P$($z \\ge$ 1.58). El valor en la fila $z$ = 1.5 y la columna 0.08 de la tabla normal acumulada es 0.9429; por tanto, $P$($z &lt;$ 1.58) = 0.9429. Como el \u00e1rea total bajo la curva normal es 1, $P$($z \\ge$ 1.58) = 1 - 0.9429 = 0.0571.</p> In\u00a0[9]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nimport matplotlib.patches as patches\nx = np.arange(-3.5, 3.5, 0.001)\n\n#pintar el fondo externo del grafico\nplt.figure(facecolor='#D4F8B7')\n\n\n#tama\u00f1o del grafico\n#plt.figure(figsize=(6,4))\n\n\n#area de sombreado rango\nx_filtered = x[(x &gt;= 1.58) &amp; (x &lt;= 3.50)]\n\n#pintar la linea curva del grafico\nplt.plot(x, norm.pdf(x, 0, 1), linewidth = 2, color = '#000')\n\n#pintar el area sombreada del grafico y graficar\nplt.fill_between(x_filtered, norm.pdf(x_filtered, 0, 1), color='#5CCB5F', alpha=1, edgecolor='black')\n\n#a\u00f1adir texto al grafico\nplt.text(3, 0.15, (\"P(z \\u2264 -0.50) \\n= 0.1587\"))\nplt.text(3.9, 0, (\"z\"))\n\n#bordes del grafico\nax = plt.gca()\nax.spines['top'].set_color('#009929')\nax.spines['top'].set_linewidth(2)\n#ancho del borde superior\nax.spines['top'].set_bounds(-4.5, 4.5)\nax.spines['bottom'].set_color('#009929')\nax.spines['bottom'].set_linewidth(2)\n#ancho del borde inferior\nax.spines['bottom'].set_bounds(-4.5, 4.5)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n#pintar el fondo interno del grafico\nax.set_facecolor('#D4F8B7')\n\n#linea inferior del grafico\nplt.plot(x, [0]*len(x), color='black', linewidth=1)\n\n#centrar el grafico\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\n\n#plt.arrow(0.1, 0.1, 0.2, 0.2, width=0.05, color='black')\n\n#flecha\nplt.annotate(\" \", xytext = (2.9, 0.15), xy = (1.8, 0.05), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),\n             horizontalalignment = 'center')\n\n#texto con flecha\nplt.annotate(\"P(-1.00 \\u2264 z \\u2264 1.00) \\n= 0.8413 - 01587 = 0.6826\", xytext = (2.5, 0.25),\n             xy = (0, 0.20), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),\n             horizontalalignment = 'center')\n\n#mostrar ejes x, y\nplt.xticks([-2, -1, 0, 1, 2])\nplt.yticks([])\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm import matplotlib.patches as patches x = np.arange(-3.5, 3.5, 0.001)  #pintar el fondo externo del grafico plt.figure(facecolor='#D4F8B7')   #tama\u00f1o del grafico #plt.figure(figsize=(6,4))   #area de sombreado rango x_filtered = x[(x &gt;= 1.58) &amp; (x &lt;= 3.50)]  #pintar la linea curva del grafico plt.plot(x, norm.pdf(x, 0, 1), linewidth = 2, color = '#000')  #pintar el area sombreada del grafico y graficar plt.fill_between(x_filtered, norm.pdf(x_filtered, 0, 1), color='#5CCB5F', alpha=1, edgecolor='black')  #a\u00f1adir texto al grafico plt.text(3, 0.15, (\"P(z \\u2264 -0.50) \\n= 0.1587\")) plt.text(3.9, 0, (\"z\"))  #bordes del grafico ax = plt.gca() ax.spines['top'].set_color('#009929') ax.spines['top'].set_linewidth(2) #ancho del borde superior ax.spines['top'].set_bounds(-4.5, 4.5) ax.spines['bottom'].set_color('#009929') ax.spines['bottom'].set_linewidth(2) #ancho del borde inferior ax.spines['bottom'].set_bounds(-4.5, 4.5) ax.spines['right'].set_visible(False) ax.spines['left'].set_visible(False)  #pintar el fondo interno del grafico ax.set_facecolor('#D4F8B7')  #linea inferior del grafico plt.plot(x, [0]*len(x), color='black', linewidth=1)  #centrar el grafico plt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)  #plt.arrow(0.1, 0.1, 0.2, 0.2, width=0.05, color='black')  #flecha plt.annotate(\" \", xytext = (2.9, 0.15), xy = (1.8, 0.05), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),              horizontalalignment = 'center')  #texto con flecha plt.annotate(\"P(-1.00 \\u2264 z \\u2264 1.00) \\n= 0.8413 - 01587 = 0.6826\", xytext = (2.5, 0.25),              xy = (0, 0.20), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),              horizontalalignment = 'center')  #mostrar ejes x, y plt.xticks([-2, -1, 0, 1, 2]) plt.yticks([]) plt.show() <p>Suponga que quiere determinar un valor de $z$ tal que la probabilidad de obtener un valor de $z$ mayor sea 0.10. La figura siguiente muestra esta situaci\u00f3n de manera gr\u00e1fica.</p> In\u00a0[10]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nimport matplotlib.patches as patches\nx = np.arange(-3.5, 3.5, 0.001)\n\n#pintar el fondo externo del grafico\nplt.figure(facecolor='#D4F8B7')\n\n\n#tama\u00f1o del grafico\n#plt.figure(figsize=(6,4))\n\n\n#area de sombreado rango\nx_filtered = x[(x &gt;= 1.58) &amp; (x &lt;= 3.50)]\n\n#pintar la linea curva del grafico\nplt.plot(x, norm.pdf(x, 0, 1), linewidth = 2, color = '#000')\n\n#pintar el area sombreada del grafico y graficar\nplt.fill_between(x_filtered, norm.pdf(x_filtered, 0, 1), color='#5CCB5F', alpha=1, edgecolor='black')\n\n#a\u00f1adir texto al grafico\nplt.text(2.6, 0.10, (\"Probabilidad = 0.10\"))\nplt.text(3.9, 0, (\"z\"))\n\n#bordes del grafico\nax = plt.gca()\nax.spines['top'].set_color('#009929')\nax.spines['top'].set_linewidth(2)\n#ancho del borde superior\nax.spines['top'].set_bounds(-4.5, 4.5)\nax.spines['bottom'].set_color('#009929')\nax.spines['bottom'].set_linewidth(2)\n#ancho del borde inferior\nax.spines['bottom'].set_bounds(-4.5, 4.5)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n#pintar el fondo interno del grafico\nax.set_facecolor('#D4F8B7')\n\n#linea inferior del grafico\nplt.plot(x, [0]*len(x), color='black', linewidth=1)\n\n#centrar el grafico\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\n\n#plt.arrow(0.1, 0.1, 0.2, 0.2, width=0.05, color='black')\n\n#flecha\nplt.annotate(\" \", xytext = (2.9, 0.10), xy = (1.8, 0.05), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),\n             horizontalalignment = 'center')\n\n#mostrar ejes x, y\nplt.xticks([-2, -1, 0, 1, 2])\nplt.yticks([])\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm import matplotlib.patches as patches x = np.arange(-3.5, 3.5, 0.001)  #pintar el fondo externo del grafico plt.figure(facecolor='#D4F8B7')   #tama\u00f1o del grafico #plt.figure(figsize=(6,4))   #area de sombreado rango x_filtered = x[(x &gt;= 1.58) &amp; (x &lt;= 3.50)]  #pintar la linea curva del grafico plt.plot(x, norm.pdf(x, 0, 1), linewidth = 2, color = '#000')  #pintar el area sombreada del grafico y graficar plt.fill_between(x_filtered, norm.pdf(x_filtered, 0, 1), color='#5CCB5F', alpha=1, edgecolor='black')  #a\u00f1adir texto al grafico plt.text(2.6, 0.10, (\"Probabilidad = 0.10\")) plt.text(3.9, 0, (\"z\"))  #bordes del grafico ax = plt.gca() ax.spines['top'].set_color('#009929') ax.spines['top'].set_linewidth(2) #ancho del borde superior ax.spines['top'].set_bounds(-4.5, 4.5) ax.spines['bottom'].set_color('#009929') ax.spines['bottom'].set_linewidth(2) #ancho del borde inferior ax.spines['bottom'].set_bounds(-4.5, 4.5) ax.spines['right'].set_visible(False) ax.spines['left'].set_visible(False)  #pintar el fondo interno del grafico ax.set_facecolor('#D4F8B7')  #linea inferior del grafico plt.plot(x, [0]*len(x), color='black', linewidth=1)  #centrar el grafico plt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)  #plt.arrow(0.1, 0.1, 0.2, 0.2, width=0.05, color='black')  #flecha plt.annotate(\" \", xytext = (2.9, 0.10), xy = (1.8, 0.05), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),              horizontalalignment = 'center')  #mostrar ejes x, y plt.xticks([-2, -1, 0, 1, 2]) plt.yticks([]) plt.show()      Dada una probabilidad, se puede usar la tabla normal  est\u00e1ndar en modo inverso para encontrar el valor de z correspondiente.    <p>Este problema es el inverso de las situaciones presentadas en los ejemplos anteriores, en los cuales se especific\u00f3 el valor de $z$ y luego se calcul\u00f3 la probabilidad, o \u00e1rea, correspondiente. En este ejemplo se proporciona la probabilidad, o \u00e1rea, y luego se pide determinar el valor $z$ respectivo. Para hacerlo, se usa la tabla de probabilidad normal est\u00e1ndar de una manera un poco distinta.</p> <p>La tabla proporciona el \u00e1rea bajo la curva a la izquierda de un valor de $z$ espec\u00edfico. Dado que se conoce que el \u00e1rea en el extremo superior de la curva es 0.10, se busca un valor de $z$ tal que el \u00e1rea a la izquierda de este sea igual a 0.9000. Al revisar la tabla, se encuentra que 0.8997 es la probabilidad acumulada m\u00e1s cercana a 0.9000, y se presenta la secci\u00f3n correspondiente de la tabla que muestra este resultado.</p> <p>Tabla 6.2  Distribuci\u00f3n de probabilidad normal estandar z 0.06 0.07 0.08 0.09 ... 1.0 0.8554 0.8577 0.8599 0.8621 1.1 0.8770 0.8790 0.8810 0.8830 1.2 0.8962 0.8980 0.8997 0.9015 1.3 0.9131 0.9147 0.9162 0.9177 1.4 0.9279 0.9292 0.9306 0.9319 ... </p> <p>Al leer el valor de $z$ en la columna del extremo izquierdo y la fila superior de la tabla, encontramos que es 1.28. Por tanto, un \u00e1rea de aproximadamente 0.9000 (en realidad, 0.8997) estar\u00e1 a la izquierda de $z$ = 1.28 Respecto de la pregunta formulada originalmente, hay una probabilidad aproximada de 0.10 de que el valor de $z$ sea mayor que 1.28.</p> <p>Se estudia la distribuci\u00f3n normal est\u00e1ndar de manera detallada porque se utiliza para calcular las probabilidades de todas las distribuciones normales. Cuando se enfrenta a preguntas de probabilidad sobre una distribuci\u00f3n normal con una media ($\\mu$) y una desviaci\u00f3n est\u00e1ndar ($\\sigma$) espec\u00edficas, se resuelven convirtiendo primero la distribuci\u00f3n a la normal est\u00e1ndar. Se emplea la tabla de probabilidad normal est\u00e1ndar y los valores de $z$ correspondientes para obtener las probabilidades deseadas. El p\u00e1rrafo menciona la f\u00f3rmula para convertir cualquier variable aleatoria normal ($x$) con media $\\mu$ y desviaci\u00f3n est\u00e1ndar $\\sigma$ a la variable aleatoria normal est\u00e1ndar ($z$).</p> CONVERSI\u00d3N A LA VARIABLE ALEATORIA NORMAL ESTANDAR                  $$ z = \\frac{x - \\mu}{\\sigma}$$              (6.3) <p>Suponga que LLANTAX<sub>Ltda</sub> Desarrollo un nuevo neumatico radial con cinturon de acero que se vende a traves de una cadena nacional de tiendas de descuento. Tomando en cuenta que el neumatico es un nuevo producto. Los gerentes creen que la garantia de kilometraje sera un factor importante. Los gerentes quieren informacion de probabilidad sobre los $x$ = numero de kilometros que estos duran.</p> <p>El grupo de ingenieria estim\u00f3 que su kilometraje es $\\sigma$ = 42000 kilometros y la desviacion estandar es $\\sigma$ = 5000. Los datos recabados indican que es una distribucion normal.</p> <p>\u00bfCual es la probabilidad de que el kilometraje de los neumaticos $x$ sepere la cifra de 50000 kilometros?</p> In\u00a0[11]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\nx = np.arange(-3.5, 3.5, 0.001)\n\n#pintar el fondo externo del grafico\nplt.figure(facecolor='#D4F8B7')\n\n\n#tama\u00f1o del grafico\n#plt.figure(figsize=(6,4))\n\n\n#area de sombreado rango\nx_filtered = x[(x &gt;= 1.6) &amp; (x &lt;= 3.50)]\n\n#pintar la linea curva del grafico\nplt.plot(x, norm.pdf(x, 0, 1), linewidth = 2, color = '#000')\n\n#pintar el area sombreada del grafico y graficar \nplt.fill_between(x_filtered, norm.pdf(x_filtered, 0, 1), color='#5CCB5F', alpha=0.5, edgecolor='black')\n\n#a\u00f1adir texto al grafico\nplt.text(2.6, 0.10, (\"$P(x &lt; 50000)$\"))\nplt.text(2.6, 0.30, (\"$\\mu = 42000$\"))\nplt.text(2.6, 0.28, (\"$\\sigma = 5000$\"))\nplt.text(-3, 0.30, (\"$P(x &lt; 50000)$\"))\nplt.text(3.9, 0, (\"z\"))\n\n#bordes del grafico\nax = plt.gca()\nax.spines['top'].set_color('#009929')\nax.spines['top'].set_linewidth(2)\n#ancho del borde superior\nax.spines['top'].set_bounds(-6.5, 6.5)\nax.spines['bottom'].set_color('#009929')\nax.spines['bottom'].set_linewidth(2)\n#ancho del borde inferior\nax.spines['bottom'].set_bounds(-6.5, 6.5)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n#pintar el fondo interno del grafico\nax.set_facecolor('#D4F8B7')\n\n#linea inferior del grafico\nplt.plot(x, [0]*len(x), color='black', linewidth=1)\n\n#centrar el grafico\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\n\n#plt.arrow(0.1, 0.1, 0.2, 0.2, width=0.05, color='black')\n\n#flecha\nplt.annotate(\" \", xytext = (2.9, 0.1), xy = (1.8, 0.03), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),\n             horizontalalignment = 'center')\n\nplt.annotate(\" \", xytext = (-2, 0.29), xy = (0, 0.15), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),\n             horizontalalignment = 'center')\n\n#mostrar ejes x, y\nplt.xticks([0, 1.6])\nplt.yticks([])\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm  x = np.arange(-3.5, 3.5, 0.001)  #pintar el fondo externo del grafico plt.figure(facecolor='#D4F8B7')   #tama\u00f1o del grafico #plt.figure(figsize=(6,4))   #area de sombreado rango x_filtered = x[(x &gt;= 1.6) &amp; (x &lt;= 3.50)]  #pintar la linea curva del grafico plt.plot(x, norm.pdf(x, 0, 1), linewidth = 2, color = '#000')  #pintar el area sombreada del grafico y graficar  plt.fill_between(x_filtered, norm.pdf(x_filtered, 0, 1), color='#5CCB5F', alpha=0.5, edgecolor='black')  #a\u00f1adir texto al grafico plt.text(2.6, 0.10, (\"$P(x &lt; 50000)$\")) plt.text(2.6, 0.30, (\"$\\mu = 42000$\")) plt.text(2.6, 0.28, (\"$\\sigma = 5000$\")) plt.text(-3, 0.30, (\"$P(x &lt; 50000)$\")) plt.text(3.9, 0, (\"z\"))  #bordes del grafico ax = plt.gca() ax.spines['top'].set_color('#009929') ax.spines['top'].set_linewidth(2) #ancho del borde superior ax.spines['top'].set_bounds(-6.5, 6.5) ax.spines['bottom'].set_color('#009929') ax.spines['bottom'].set_linewidth(2) #ancho del borde inferior ax.spines['bottom'].set_bounds(-6.5, 6.5) ax.spines['right'].set_visible(False) ax.spines['left'].set_visible(False)  #pintar el fondo interno del grafico ax.set_facecolor('#D4F8B7')  #linea inferior del grafico plt.plot(x, [0]*len(x), color='black', linewidth=1)  #centrar el grafico plt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)  #plt.arrow(0.1, 0.1, 0.2, 0.2, width=0.05, color='black')  #flecha plt.annotate(\" \", xytext = (2.9, 0.1), xy = (1.8, 0.03), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),              horizontalalignment = 'center')  plt.annotate(\" \", xytext = (-2, 0.29), xy = (0, 0.15), arrowprops = dict(facecolor = 'black', width = 0.2, headwidth = 8),              horizontalalignment = 'center')  #mostrar ejes x, y plt.xticks([0, 1.6]) plt.yticks([]) plt.show() <p>En $x$ = 50000 tenemos</p> <p>\\begin{equation*}     z = \\frac{x - \\mu}{\\sigma} = \\frac{50000 - 42000}{5000} = \\frac{8000}{5000} = 1.6 \\end{equation*}</p> <p>Vemos que un valor de $x$ = 50 000 en la distribuci\u00f3n normal de LLANTAX<sub>Ltda</sub> corresponde al valor de $z$ =1.6 en la distribuci\u00f3n normal est\u00e1ndar. Consultando la tabla de probabilidad normal est\u00e1ndar, constatamos que el \u00e1rea bajo la curva normal est\u00e1ndar a la izquierda de $z$ = 1.6 es 0.9452. Por tanto, 1.000 - 0.9452 = 0.0548 es la probabilidad de que $z$ exceda 1.6, y por consiguiente x exceder\u00e1 de 50 000.</p> <p>Podemos concluir que alrededor de 5.48% de los neum\u00e1ticos superar\u00e1 los 50 000 kilometros.</p> <p>Ejercicio 1. En la ciudad de La Paz se estima que la temperatura m\u00e1xima en el mes de septiembre sigue una distribuci\u00f3n normal, con media 18\u00b0 y desviaci\u00f3n t\u00edpica 4\u00b0.</p> <p>Calcular el numero de dias del mes en los que se espera alcanzar maximas entre 16\u00b0 y 21\u00b0 .</p> <p>Soluci\u00f3n  \\begin{align}     P(16 \\leq x \\leq 21) &amp;= P\\left(\\frac{16 - 18}{4} \\leq z \\leq \\frac{21 - 18}{4}\\right)\\\\     &amp;= P(-0.5 \\leq z \\leq 0.75)\\\\     &amp;= P(z \\leq 0.75) - P(z \\geq -0.5)\\\\     &amp;= P(z \\leq 0.75) - [1 - P(z \\leq 0.5)] \\end{align}</p> <p>Buscamos los valores en la tabla de distribucion normal:</p> <p>\\begin{equation*}     P(z \\leq 0.75) = 0.7733 \\quad y \\quad P(z \\leq 0.5) = 0.6914 \\end{equation*}</p> <p>Por lo tanto</p> <p>\\begin{align}     30 \\cdot P(16 \\leq x \\leq 21) &amp;= 30 \\cdot P\\left(\\frac{16 - 18}{4} \\leq z \\leq \\frac{21 - 18}{4}\\right)\\\\     &amp;= (30)[0.7733-(1-0.6914)]\\\\     &amp;= (30)(0.4647)\\\\     &amp;= 13.941 \\end{align}</p> <p>\u2234 Esto quiere decir, que en todo el mes, solo 14 dias alcanzaran temperatura entre 16 y 21 grados</p> <p>Ejercicio 2. La media de los pesos de 600 estudiantes de un colegio es 70 kg y la desviacion tipica 4 kg.</p> <p>Suponiendo que los pesos se distribuyen normalmente, hallar cuantos estudiantes pesan:</p> <ol> <li>Entre 60 kg y 75 kg.</li> <li>Mas de 90 kg.</li> <li>Menos de 64 kg</li> </ol> <p>Soluci\u00f3n </p> <p>1 Entre 60 kg y 75 kg. </p> <p>\\begin{align}     P(60 &lt; x \\leq 75) &amp;= P\\left(\\frac{60 - 70}{4} \\leq z \\leq \\frac{75 - 70}{4}\\right)\\\\     &amp;= P(-2.5 \\leq z \\leq 1.25)\\\\     &amp;= P(z \\leq 1.25) - P(z \\geq -2.5)\\\\     &amp;= P(z \\leq 1.25) - [1 - P(z \\leq 2.5)] \\end{align}</p> <p>Buscamos los valores en la tabla de distribucion normal:</p> <p>\\begin{equation*}     P(z \\leq 1.25) = 0.8943 \\quad y \\quad P(z \\leq 2.5) = 0.9937 \\end{equation*}</p> <p>Por lo tanto</p> <p>\\begin{align}     600 \\cdot P(60 &lt; x \\leq 75) &amp;= 600 \\cdot P\\left(\\frac{60 - 70}{4} \\leq z \\leq \\frac{75 - 70}{4}\\right)\\\\     &amp;= (600)[0.8943-(1-0.9937)]\\\\     &amp;= 533 \\end{align}</p> <p>\u2234 De los 600 estudiantes 533 se encuentran entre los 60 y 75 kilogramos de peso</p> <p>2 Mas de 90 kg. </p> <p>\\begin{align}     P(x &gt; 90) &amp;= P\\left(z &gt;\\frac{90 - 70}{4}\\right)\\\\     &amp;= P(z &gt; 5)\\\\     &amp;= 1 - P(z \\leq 5)\\\\     &amp;= 1-1\\\\     &amp;= 0 \\end{align}</p> <p>multiplicando por 600</p> <p>\\begin{equation}     600 \\cdot P (x &gt; 90) = (600)(0) = 0 \\end{equation}</p> <p>\u2234 Es imposible hallar a un solo estudiante por encima de los 90 kilogramos</p> <p>3 Menos de 64 kg. </p> <p>\\begin{align}     P(x &lt; 64) &amp;= P\\left(z &lt; \\frac{64 - 70}{4}\\right)\\\\     &amp;= P(z &lt; -1.5)\\\\     &amp;= 1 - P(z &lt; 1.5)\\\\     &amp;= 1-0.9331\\\\     &amp;= 0.0669 \\end{align}</p> <p>Por lo tanto</p> <p>\\begin{equation}     600 \\cdot P (x &lt; 64) = (600)(0.0669) = 40.14 \\end{equation}</p> <p>\u2234 Hay 40 estudiantes que pesan menos de 64 kilogramos</p> <p>La distribuci\u00f3n normal proporciona una aproximaci\u00f3n f\u00e1cil de usar de las probabilidades binomiales.</p> <p>Cuando se usa la aproximaci\u00f3n normal a la binomial, se establece</p> <p>$$\\mu = np \\quad y\\quad \\sigma = np(1 -p)$$</p> <p>en la definici\u00f3n de la curva normal.</p> <p>Ejemplo 1</p> <p>Supongamos que en una elecci\u00f3n en Bolivia, el 60% de los votantes apoya a un candidato espec\u00edfico. Queremos calcular la probabilidad de que, en una muestra de 200 votantes, al menos 120 de ellos apoyen a este candidato. La distribuci\u00f3n de este escenario sigue una distribuci\u00f3n binomial, pero para simplificar los c\u00e1lculos, utilizaremos la aproximaci\u00f3n normal. La media $(\\mu)$ de la distribuci\u00f3n binomial es  $np$ , y la desviaci\u00f3n est\u00e1ndar $(\\sigma)$ es $np(1\u2212p)$</p> <p>En este caso:</p> <ul> <li>$n$ (tama\u00f1o de la muestra) = 200,</li> <li>$p$ (probabilidad de \u00e9xito) = 0.6.</li> </ul> <p>Por lo tanto, la media es 200 $\\cdot$ 0.6 = 120  y la desviaci\u00f3n est\u00e1ndar es La ra\u00edz cuadrada de $\\sqrt{2000\\cdot 60\\cdot 4}$.</p> <p>Luego, utilizando la aproximaci\u00f3n normal, podemos calcular la probabilidad de que al menos 120 votantes apoyen al candidato. Esto implica convertir la variable discreta (n\u00famero de votantes) en una variable continua utilizando la correcci\u00f3n de continuidad.</p> <p>En t\u00e9rminos m\u00e1s simples, estamos aproximando la distribuci\u00f3n binomial a una distribuci\u00f3n normal y calculando la probabilidad utilizando la funci\u00f3n de distribuci\u00f3n acumulativa normal (por ejemplo, con tablas $z$ o software estad\u00edstico).</p> <p>Este ejemplo ilustra c\u00f3mo la aproximaci\u00f3n normal de las probabilidades binomiales puede ser aplicada en el contexto de eventos en Bolivia, como una elecci\u00f3n, cuando el tama\u00f1o de la muestra es lo suficientemente grande.</p> In\u00a0[12]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# Par\u00e1metros del problema\nn = 200  # tama\u00f1o de la muestra\np = 0.6  # probabilidad de \u00e9xito\n\n# Calcular la media y desviaci\u00f3n est\u00e1ndar de la distribuci\u00f3n binomial\nmu_binomial = n * p\nsigma_binomial = np.sqrt(n * p * (1 - p))\n\n# Definir la distribuci\u00f3n normal\ndistribucion_normal = norm(loc=mu_binomial, scale=sigma_binomial)\n\n# Calcular la probabilidad de que al menos 120 votantes apoyen al candidato\nx = 120\nprobabilidad_binomial = 1 - distribucion_normal.cdf(x - 0.5)  # Aplicar correcci\u00f3n de continuidad\n\n# Visualizar la distribuci\u00f3n normal aproximada\nx_vals = np.linspace(mu_binomial - 4 * sigma_binomial, mu_binomial + 4 * sigma_binomial, 100)\ny_vals = distribucion_normal.pdf(x_vals)\n\nplt.plot(x_vals, y_vals, label='Distribuci\u00f3n Normal Aproximada')\nplt.fill_between(x_vals, y_vals, where=(x_vals &gt;= x), color='orange', alpha=0.3, label=f'Probabilidad ({x} o m\u00e1s)')\nplt.xlabel('N\u00famero de votantes que apoyan al candidato')\nplt.ylabel('Densidad de probabilidad')\nplt.title('Aproximaci\u00f3n normal de las probabilidades binomiales')\nplt.legend()\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm  # Par\u00e1metros del problema n = 200  # tama\u00f1o de la muestra p = 0.6  # probabilidad de \u00e9xito  # Calcular la media y desviaci\u00f3n est\u00e1ndar de la distribuci\u00f3n binomial mu_binomial = n * p sigma_binomial = np.sqrt(n * p * (1 - p))  # Definir la distribuci\u00f3n normal distribucion_normal = norm(loc=mu_binomial, scale=sigma_binomial)  # Calcular la probabilidad de que al menos 120 votantes apoyen al candidato x = 120 probabilidad_binomial = 1 - distribucion_normal.cdf(x - 0.5)  # Aplicar correcci\u00f3n de continuidad  # Visualizar la distribuci\u00f3n normal aproximada x_vals = np.linspace(mu_binomial - 4 * sigma_binomial, mu_binomial + 4 * sigma_binomial, 100) y_vals = distribucion_normal.pdf(x_vals)  plt.plot(x_vals, y_vals, label='Distribuci\u00f3n Normal Aproximada') plt.fill_between(x_vals, y_vals, where=(x_vals &gt;= x), color='orange', alpha=0.3, label=f'Probabilidad ({x} o m\u00e1s)') plt.xlabel('N\u00famero de votantes que apoyan al candidato') plt.ylabel('Densidad de probabilidad') plt.title('Aproximaci\u00f3n normal de las probabilidades binomiales') plt.legend() plt.show() <p>Ejemplo 2</p> <p>Supongamos que una empresa de producci\u00f3n de alimentos desea determinar la probabilidad de que un lote de 1000 paquetes de galletas contenga menos de 950 galletas. La probabilidad de que una galleta sea defectuosa es del 5%. \u00bfCu\u00e1l es la probabilidad de que el lote contenga menos de 950 galletas?</p> <p>Para resolver este problema, podemos utilizar la aproximaci\u00f3n normal a las probabilidades binomiales. Primero, necesitamos calcular la media y la desviaci\u00f3n est\u00e1ndar de la distribuci\u00f3n binomial. La media es igual a $np$, donde $n$ es el n\u00famero de ensayos y $p$ es la probabilidad de \u00e9xito en un ensayo dado. En este caso, $n$ = 1000 y $p$ = 0.95, por lo que la media es 1000 $\\cdot$ 0.95 = 950. La desviaci\u00f3n est\u00e1ndar es igual a $\\sqrt{np(1 - p)}$, que en este caso es $\\sqrt{1000 \\cdot 0.95 \\cdot 0.05}$ = 9.7468.</p> <p>A continuaci\u00f3n, podemos estandarizar la distribuci\u00f3n binomial utilizando la f\u00f3rmula $z$ = ($x - \\mu$) / $\\sigma$, donde $x$ es el n\u00famero de \u00e9xitos que estamos buscando, $\\mu$ es la media y $\\sigma$ es la desviaci\u00f3n est\u00e1ndar. En este caso, estamos buscando la probabilidad de que haya menos de 950 galletas en el lote, por lo que $x$ = 949. Sustituyendo los valores, obtenemos $z$ = (949 - 950) / 9.7468 = -0.102.</p> In\u00a0[13]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import binom, norm\n\n# Par\u00e1metros del problema\nn = 1000  # tama\u00f1o de la muestra\np = 0.95  # probabilidad de \u00e9xito\n\n# Calcular la media y la desviaci\u00f3n est\u00e1ndar de la distribuci\u00f3n binomial\nmu_binomial = n * p\nsigma_binomial = np.sqrt(n * p * (1 - p))\n\n# Estandarizar el valor de inter\u00e9s (menos de 950 galletas)\nx = 949\nz = (x - mu_binomial) / sigma_binomial\n\n# Crear la distribuci\u00f3n binomial y normal\ndistribucion_binomial = binom(n, p)\ndistribucion_normal = norm(mu_binomial, sigma_binomial)\n\n# Calcular la probabilidad usando la aproximaci\u00f3n normal\nprob_menos_950_binomial = distribucion_binomial.cdf(x)\nprob_menos_950_normal = distribucion_normal.cdf(x)\n\n# Visualizar la distribuci\u00f3n binomial y la aproximaci\u00f3n normal\nx_vals_binomial = np.arange(0, n+1)\ny_vals_binomial = distribucion_binomial.pmf(x_vals_binomial)\n\nx_vals_normal = np.linspace(mu_binomial - 4 * sigma_binomial, mu_binomial + 4 * sigma_binomial, 100)\ny_vals_normal = distribucion_normal.pdf(x_vals_normal)\n\nplt.figure(figsize=(10, 6))\n\n# Gr\u00e1fico de barras para la distribuci\u00f3n binomial\nplt.bar(x_vals_binomial, y_vals_binomial, label='Distribuci\u00f3n Binomial', alpha=0.5)\n\n# L\u00ednea para la aproximaci\u00f3n normal\nplt.plot(x_vals_normal, y_vals_normal, label='Aproximaci\u00f3n Normal', color='orange', linewidth=2)\n\n# L\u00ednea vertical para resaltar el valor de inter\u00e9s (menos de 950 galletas)\nplt.axvline(x, color='red', linestyle='--', label='Menos de 950 galletas')\n\nplt.xlabel('N\u00famero de galletas')\nplt.ylabel('Probabilidad')\nplt.title('Aproximaci\u00f3n normal a una distribuci\u00f3n binomial')\nplt.legend()\nplt.show()\n# Imprimir las probabilidades calculadas\nprint(f\"Probabilidad de menos de 950 galletas (binomial): {prob_menos_950_binomial:.4f}\")\nprint(f\"Probabilidad de menos de 950 galletas (aproximaci\u00f3n normal): {prob_menos_950_normal:.4f}\")\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import binom, norm  # Par\u00e1metros del problema n = 1000  # tama\u00f1o de la muestra p = 0.95  # probabilidad de \u00e9xito  # Calcular la media y la desviaci\u00f3n est\u00e1ndar de la distribuci\u00f3n binomial mu_binomial = n * p sigma_binomial = np.sqrt(n * p * (1 - p))  # Estandarizar el valor de inter\u00e9s (menos de 950 galletas) x = 949 z = (x - mu_binomial) / sigma_binomial  # Crear la distribuci\u00f3n binomial y normal distribucion_binomial = binom(n, p) distribucion_normal = norm(mu_binomial, sigma_binomial)  # Calcular la probabilidad usando la aproximaci\u00f3n normal prob_menos_950_binomial = distribucion_binomial.cdf(x) prob_menos_950_normal = distribucion_normal.cdf(x)  # Visualizar la distribuci\u00f3n binomial y la aproximaci\u00f3n normal x_vals_binomial = np.arange(0, n+1) y_vals_binomial = distribucion_binomial.pmf(x_vals_binomial)  x_vals_normal = np.linspace(mu_binomial - 4 * sigma_binomial, mu_binomial + 4 * sigma_binomial, 100) y_vals_normal = distribucion_normal.pdf(x_vals_normal)  plt.figure(figsize=(10, 6))  # Gr\u00e1fico de barras para la distribuci\u00f3n binomial plt.bar(x_vals_binomial, y_vals_binomial, label='Distribuci\u00f3n Binomial', alpha=0.5)  # L\u00ednea para la aproximaci\u00f3n normal plt.plot(x_vals_normal, y_vals_normal, label='Aproximaci\u00f3n Normal', color='orange', linewidth=2)  # L\u00ednea vertical para resaltar el valor de inter\u00e9s (menos de 950 galletas) plt.axvline(x, color='red', linestyle='--', label='Menos de 950 galletas')  plt.xlabel('N\u00famero de galletas') plt.ylabel('Probabilidad') plt.title('Aproximaci\u00f3n normal a una distribuci\u00f3n binomial') plt.legend() plt.show() # Imprimir las probabilidades calculadas print(f\"Probabilidad de menos de 950 galletas (binomial): {prob_menos_950_binomial:.4f}\") print(f\"Probabilidad de menos de 950 galletas (aproximaci\u00f3n normal): {prob_menos_950_normal:.4f}\") <pre>Probabilidad de menos de 950 galletas (binomial): 0.4625\nProbabilidad de menos de 950 galletas (aproximaci\u00f3n normal): 0.4423\n</pre> <p>La distribuci\u00f3n de probabilidad exponencial puede usarse para variables aleatorias como el tiempo entre la llegada de un autom\u00f3vil a un autolavado, el tiempo requerido para cargar un cami\u00f3n, la distancia entre los defectos importantes de una carretera, etc. La funci\u00f3n de densidad de probabilidad exponencial se presenta a continuaci\u00f3n.</p> FUNCI\u00d3N DE DENSIDAD DE PROBABILIDAD EXPONENCIAL                  $$ f(x) = \\frac{1}{\\mu} e^{-\\frac{x}{\\mu}}\\quad \\text{para}\\quad x\\geq0 $$              (6.4)          donde $\\mu$ = valor esperado o media  <p>Como ejemplo de la distribuci\u00f3n exponencial, suponga que $x$ representa el tiempo de carga para un cami\u00f3n en el muelle Schips y sigue dicha distribuci\u00f3n. Si la media, o promedio, del tiempo de carga es 15 minutos ($\\mu$ = 15), la funci\u00f3n de densidad de probabilidad apropiada para $x$ es:</p> <p>\\begin{equation*}     f(x) = \\frac{1}{15} e^{-\\frac{x}{15}} \\end{equation*}</p> <p>La figura 6.10 es la gr\u00e1fica de esta funci\u00f3n de densidad de probabilidad</p> <p>Al igual que con la distribuci\u00f3n de probabilidad continua, el \u00e1rea bajo la curva correspondiente a un intervalo proporciona la probabilidad de que la variable aleatoria asuma un valor en ese intervalo. En el ejemplo del muelle Schips, la probabilidad de que cargar un cami\u00f3n tarde 6 minutos o menos $P$($x \\leq$ 6) se define como el \u00e1rea bajo la curva en la figura 6.10 de $x$ = 0 a $x$ = 6. De manera similar, la probabilidad de que dicho tiempo sea de 18 minutos o menos $P$($x \\leq$ 18) es el \u00e1rea bajo la curva de $x$ = 0 a $x$ = 18. Note tambi\u00e9n que la probabilidad de que el tiempo de carga est\u00e9 entre 6 y 18 minutos $P$(6 $\\leq x \\leq$ 18) est\u00e1 dado por el \u00e1rea bajo la curva de $x$ = 6 a $x$ = 18.</p> <p>Para calcular probabilidades exponenciales como las que se acaban de describir, se usa la f\u00f3rmula siguiente, la cual proporciona la probabilidad acumulada de obtener un valor para la variable aleatoria exponencial menor o igual que un valor espec\u00edfico denotado por $x_0$.</p> DISTRIBUCI\u00d3N EXPONENCIAL: PROBABILIDADES ACUMULADAS                  $$ P(x \\leq x_0) = 1-e^{-\\frac{x_0}{\\mu}}$$              (6.5) <p> Figura 6.10 Distribuci\u00f3n exponencial para el ejemplo del muelle de carga Schips</p> In\u00a0[14]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Definir la funci\u00f3n\ndef f(x):\n    return (1/15) * np.exp(-x/15)\n\n# Generar valores x\nx = np.linspace(0, 30, 1000)\n\n# Calcular los valores y correspondientes\ny = f(x)\n\n# Crear la gr\u00e1fica\nplt.figure(figsize=(8, 6))\nplt.plot(x, y, label=r'$f(x) = \\frac{1}{15}e^{-\\frac{x}{15}}$', color='#009929')\nplt.xlabel('Tiempo de carga')\n\n# Agregar fondo verde\nplt.gca().set_facecolor('#E1FFAF')\nplt.gcf().patch.set_facecolor('#E1FFAF')\n\n# Colorear las regiones entre 0-6 y 18-30\nplt.fill_between(x, y, where=[(val &gt;= 0 and val &lt;= 6) or (val &gt;= 18 and val &lt;= 30) for val in x], color='#98F84A')\nplt.fill_between(x, y, where=[(val &gt;= 6 and val &lt;= 18) for val in x], color='#5ccb5f')\n\n# Establecer los lugares y etiquetas deseadas en el eje x\nplt.xticks([0, 6, 12, 18, 24, 30])\n\n# Establecer las ubicaciones y etiquetas deseadas en el eje y\nplt.yticks([0.01, 0.03, 0.05, 0.07])\n\n# Ajustar l\u00edmites de los ejes\nplt.ylim(0, 0.07)  # Ajusta el l\u00edmite y seg\u00fan tu preferencia\nplt.xlim(0, 30)   # Ajusta el l\u00edmite x seg\u00fan tu preferencia\n\n# Ocultar solo las aristas de la derecha y de arriba\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['top'].set_visible(False)\n\nplt.vlines(x=6, ymin=0, ymax=0.0447, color='black', linestyle='-', linewidth=1)\nplt.vlines(x=18, ymin=0, ymax=0.02, color='black', linestyle='-', linewidth=1)\n\n# Ajustar las l\u00edneas en el eje x para que sean un poco m\u00e1s largas y apunten a la funci\u00f3n\nfor point in [0, 6, 12, 18, 24, 30]:\n    plt.vlines(x=point, ymin=0, ymax=0.001, color='black', linestyle='-', linewidth=1)\nplt.text(30.5, 0, r'$x$', ha='left', va='center', color='black')\n\n# Ajustar las l\u00edneas en el eje y para que sean un poco m\u00e1s largas y apunten a la funci\u00f3n\nfor point in [0.01, 0.03, 0.05, 0.07]:\n    plt.hlines(y=point, xmin=0, xmax=0.5, color='black', linestyle='-', linewidth=1)\nplt.text(0, 0.074, r'$f(x)$', ha='left', va='center', color='black')\n\n# A\u00f1adir una flecha que apunte al intervalo entre 0 y 6\nplt.annotate('$P(x \\leqslant 6)$', xy=(3, 0.025), xytext=(5, 0.055),\n             arrowprops=dict(facecolor='black', arrowstyle='-&gt;'))\n\n# A\u00f1adir otra flecha que apunte al intervalo entre 6 y 18\nplt.annotate('$P(6 \\leqslant x \\leqslant 18)$', xy=(12, 0.015), xytext=(15, 0.055),\n             arrowprops=dict(facecolor='black', arrowstyle='-&gt;'))\n\n# Mostrar la gr\u00e1fica\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt  # Definir la funci\u00f3n def f(x):     return (1/15) * np.exp(-x/15)  # Generar valores x x = np.linspace(0, 30, 1000)  # Calcular los valores y correspondientes y = f(x)  # Crear la gr\u00e1fica plt.figure(figsize=(8, 6)) plt.plot(x, y, label=r'$f(x) = \\frac{1}{15}e^{-\\frac{x}{15}}$', color='#009929') plt.xlabel('Tiempo de carga')  # Agregar fondo verde plt.gca().set_facecolor('#E1FFAF') plt.gcf().patch.set_facecolor('#E1FFAF')  # Colorear las regiones entre 0-6 y 18-30 plt.fill_between(x, y, where=[(val &gt;= 0 and val &lt;= 6) or (val &gt;= 18 and val &lt;= 30) for val in x], color='#98F84A') plt.fill_between(x, y, where=[(val &gt;= 6 and val &lt;= 18) for val in x], color='#5ccb5f')  # Establecer los lugares y etiquetas deseadas en el eje x plt.xticks([0, 6, 12, 18, 24, 30])  # Establecer las ubicaciones y etiquetas deseadas en el eje y plt.yticks([0.01, 0.03, 0.05, 0.07])  # Ajustar l\u00edmites de los ejes plt.ylim(0, 0.07)  # Ajusta el l\u00edmite y seg\u00fan tu preferencia plt.xlim(0, 30)   # Ajusta el l\u00edmite x seg\u00fan tu preferencia  # Ocultar solo las aristas de la derecha y de arriba plt.gca().spines['right'].set_visible(False) plt.gca().spines['top'].set_visible(False)  plt.vlines(x=6, ymin=0, ymax=0.0447, color='black', linestyle='-', linewidth=1) plt.vlines(x=18, ymin=0, ymax=0.02, color='black', linestyle='-', linewidth=1)  # Ajustar las l\u00edneas en el eje x para que sean un poco m\u00e1s largas y apunten a la funci\u00f3n for point in [0, 6, 12, 18, 24, 30]:     plt.vlines(x=point, ymin=0, ymax=0.001, color='black', linestyle='-', linewidth=1) plt.text(30.5, 0, r'$x$', ha='left', va='center', color='black')  # Ajustar las l\u00edneas en el eje y para que sean un poco m\u00e1s largas y apunten a la funci\u00f3n for point in [0.01, 0.03, 0.05, 0.07]:     plt.hlines(y=point, xmin=0, xmax=0.5, color='black', linestyle='-', linewidth=1) plt.text(0, 0.074, r'$f(x)$', ha='left', va='center', color='black')  # A\u00f1adir una flecha que apunte al intervalo entre 0 y 6 plt.annotate('$P(x \\leqslant 6)$', xy=(3, 0.025), xytext=(5, 0.055),              arrowprops=dict(facecolor='black', arrowstyle='-&gt;'))  # A\u00f1adir otra flecha que apunte al intervalo entre 6 y 18 plt.annotate('$P(6 \\leqslant x \\leqslant 18)$', xy=(12, 0.015), xytext=(15, 0.055),              arrowprops=dict(facecolor='black', arrowstyle='-&gt;'))  # Mostrar la gr\u00e1fica plt.show() <p>Para el ejemplo del muelle Schips, $x$ = tiempo de carga en minutos y $\\mu$ = 15 minutos.</p> <p>Usando la ecuaci\u00f3n (6.5)</p> <p>\\begin{equation*} P(x \\leqslant x_0) = 1-e^{-\\frac{x_0}{15}} \\end{equation*}</p> <p>Por consiguiente, la probabilidad de que un cami\u00f3n tarde 6 minutos o menos es</p> <p>\\begin{equation*} P(x \\leqslant 6) = 1-e^{-\\frac{6}{15}} = 0.3297 \\end{equation*}</p> <p>Utilizando la ecuaci\u00f3n (6.5), calculamos la probabilidad de cargar un cami\u00f3n en 18 minutos o menos.</p> <p>\\begin{equation*} P(x \\leqslant 18) = 1-e^{-\\frac{18}{15}} = 0.6988 \\end{equation*}</p> <p>Por tanto, la probabilidad de que la carga del cami\u00f3n tarde entre 6 y 18 minutos es igual a 0.6988 - 0.3297 = 0.3691. Las probabilidades para cualquier otro intervalo pueden calcularse de manera similar.</p> <p>En el ejemplo anterior, el tiempo medio que toma cargar un cami\u00f3n es $\\mu$ = 15 minutos. Una propiedad de la distribuci\u00f3n exponencial indica que la media de la distribuci\u00f3n y la desviaci\u00f3n est\u00e1ndar de la distribuci\u00f3n son iguales. Por tanto, la desviaci\u00f3n est\u00e1ndar del tiempo que lleva cargar un cami\u00f3n es $\\sigma$ = 15 minutos. La varianza es $\\sigma^2 = (15)^2 = 225$.</p> <p>En la secci\u00f3n 5.5 se introdujo la distribuci\u00f3n de Poisson como una distribuci\u00f3n de probabilidad discreta que a menudo es \u00fatil cuando se examina el n\u00famero de ocurrencias de un evento en un intervalo de tiempo o espacio espec\u00edfico. Recuerde que la funci\u00f3n de probabilidad de Poisson es</p> <p>\\begin{equation*}  f(x) = \\frac{\\mu^x \\cdot e^{-\\mu}}{x!} \\end{equation*}</p> <p>donde \\begin{align}\\nonumber \\mu = &amp;\\text{valor esperado o n\u00famero medio de}\\\\\\nonumber &amp;\\text{ocurrencias durante un intervalo especificado} \\end{align}</p> <p>La distribuci\u00f3n de probabilidad exponencial continua est\u00e1 relacionada con la distribuci\u00f3n de Poisson discreta. Si la distribuci\u00f3n de Poisson proporciona una descripci\u00f3n apropiada del n\u00famero de ocurrencias por intervalo, la distribuci\u00f3n exponencial provee una descripci\u00f3n de la duraci\u00f3n del intervalo entre ocurrencias.</p> <p>Ejemplo</p> <p>Para ilustrar esta relaci\u00f3n, suponga que el n\u00famero de autom\u00f3viles que llegan a un autolavado durante una hora se describe por medio de una distribuci\u00f3n de probabilidad de Poisson con una media de 10 autom\u00f3viles por hora. La funci\u00f3n de probabilidad de Poisson que da la probabilidad de $x$ llegadas por hora es</p> <p>\\begin{equation*}  f(x) = \\frac{10^x \\cdot e^{-10}}{x!} \\end{equation*}</p> <p>Como el n\u00famero medio de arribos es 10 autom\u00f3viles por hora, el tiempo promedio entre la llegada de los veh\u00edculos es</p> <p>\\begin{equation*} \\frac{1\\ hora}{10\\ autom\u00f3viles} =  0.1\\ hora/autom\u00f3vil \\end{equation*}</p> <p>Por tanto, la distribuci\u00f3n exponencial correspondiente que describe el tiempo entre las llegadas tiene una media de $\\mu$ = 0.1 hora por autom\u00f3vil; como resultado, la funci\u00f3n de densidad de probabilidad exponencial apropiada es</p> <p>\\begin{equation*} f(x) = \\frac{1}{0.1} e^{-\\frac{x}{0.1}} = 10e^{-10x} \\end{equation*}</p> <p>Ejercicio 1. El n\u00famero de minutos requeridos por un estudiante de la carrera de INFORMATICA de la UMSA para terminar un examen se distribuye como una exponencial, con un promedio de 70 minutos. Suponga que el examen inicia a las 8:00am. \u00bfCu\u00e1l es la probabilidad que termine antes de las 8:45am?</p> <p>Soluci\u00f3n </p> <p>\\begin{align*} \u03bc &amp;= 70[min]\\\\ x &amp;= tiempo\\ en\\ minutos\\ para\\ resolver\\ el\\ examen \\end{align*}</p> <p>como el examen empieza a las 8:00am y necesitamos la probabilidad de que termine antes de las 8:45am lo cual nos da que el intervalo de tiempo es el siguiente</p> <p>\\begin{equation*} x_0 = 45[min] \\end{equation*}</p> <p>y con esto dandonos la probabilidad de que el examen termine antes de los 45 minutos o a los 45 minutos</p> <p>\\begin{equation*} P(x \\leq 45) \\end{equation*}</p> <p>pero como el ejercicio nos pide \"antes\" de las 8:45 por lo tanto la probabilidad buscada seria la siguiente</p> <p>\\begin{equation*} P(x &lt; 45) \\end{equation*}</p> <p>usando la probabilidad obtenida y la ecuacion (6.5)</p> <p>\\begin{align} P(x &lt; 45) &amp;= 1-e^{-\\frac{45}{70}}\\\\ &amp;= 0.4742 \\end{align}</p> <p>por lo tanto la probabilidad de que un estudiante de la carrera de INFORMATICA de la UMSA termine el examen antes de las 8:45am es</p> <p>\\begin{equation} P(x &lt; 45) = 0.4742 \\end{equation}</p> <p>Ejercicio 2. En la ciudad de La Paz el tiempo de arribo de los PumaKataris tiene una distribucion exponencial con media de 10 minutos.</p> <p>a) \u00bfCual es la probabilidad de que una persona tenga que esperar mas de una hora para tomar un taxi?</p> <p>b)  Suponga que la persona ya espero una hora. \u00bfcual es la probabilidad de que llegue uno en los siguientes 10 minutos?</p> <p>Soluci\u00f3n </p> <p>a)  \\begin{align*} \u03bc &amp;= 10[min]\\\\ x_0 &amp;= 1[h] \\end{align*}</p> <p>convirtiendo las horas a minutos</p> <p>\\begin{equation*} x_0 = 60[min] \\end{equation*}</p> <p>usando la ecuacion (6.5)</p> <p>\\begin{equation} P(x \\leq 60) = 1-e^{-\\frac{60}{10}} \\tag{1} \\end{equation}</p> <p>pero se nos pide $P(x &gt; 60)$</p> <p>Por la regla del complemento y usando la ecuacion (1) obtenida anteriormente</p> <p>\\begin{align} P(x \\leq 60) &amp;= 1 - P(x &gt; 60)\\\\ P(x \\leq 60) &amp;= 1-e^{-\\frac{60}{10}}\\\\ P(x &gt; 60) &amp;= e^{-\\frac{60}{10}}\\\\ &amp;=e^{-\\frac{6}{1}}\\\\ &amp;=0.0025 \\end{align}</p> <p>la probabilidad de que una persona espere mas de una hora un PumaKatari es</p> <p>\\begin{equation} P(x &gt; 60) = 0.0025 \\end{equation}</p> <p>b) </p> <p>la persona ya espero una hora, y se quiere calcular la probabilidad de que llegue uno en los siguientes 10 minutos el intervalo de tiempo empieza despues  de la hora y acaba en los 10 minutos por lo tanto \\begin{align*} \u03bc &amp;= 10[min]\\\\ x_0 &amp;= 10[min] \\end{align*}</p> <p>\\begin{equation*} P(x \\leq 10) \\end{equation*}</p> <p>usando la ecuacion (6.5)</p> <p>\\begin{align} P(x \\leq 10) &amp;= 1-e^{-\\frac{10}{10}}\\\\ &amp;= 0.632 \\end{align}</p> <p>Si la persona ya espero una hora la probabilidad de que llegue un PumaKatari en los siguientes 10 minutos es</p> <p>\\begin{equation} P(x \\leq 10) = 0.632 \\end{equation}</p>"},{"location":"capitulo6/","title":"\u00b6","text":"CAP\u00cdTULO 6  Distribuciones de probabilidad continua CONTENIDO <p>6.1 DiSTRIBUCI\u00d3N DE PROBABILIDAD UNIFORME</p> <ul> <li>El \u00e1rea como medida de la probabilidad</li> </ul> <p>6.2 DiSTRIBUCI\u00d3N DE PROBABILIDAD NORMAL</p> <ul> <li>Curva normal</li> <li>Distribuci\u00f3n de probabilidad normal est\u00e1ndar</li> <li>C\u00e1lculo de probabilidades para cualquier distribuci\u00f3n de probabilidad normal</li> <li>El problema de LLANTAX<sub>Ltda</sub></li> </ul> <p>6.3 APROXIMACI\u00d3N NORMAL DE LAS PROBABILIDADES BINOMIALES</p> <p>6.4 DISTRIBUCI\u00d3N DE PROBABILIDAD EXPONENCIAL</p> <ul> <li>C\u00e1lculo de probabilidades para la distribuci\u00f3n exponencial</li> <li>Relaci\u00f3n entre las distribuciones de Poisson y exponencial</li> </ul>"},{"location":"capitulo6/#61-distribucion-de-probabilidad-uniforme","title":"6.1 Distribuci\u00f3n de probabilidad uniforme\u00b6","text":""},{"location":"capitulo6/#62-distribucion-de-probabilidad-normal","title":"6.2 Distribuci\u00f3n de probabilidad normal\u00b6","text":""},{"location":"capitulo6/#curva-normal","title":"Curva normal\u00b6","text":"<p>Tambi\u00e9n conocida como Campana de Gauss, esta se caracteriza por su forma de campana sim\u00e9trica. La forma de la curva est\u00e1 determinada por dos par\u00e1metros: la media y la desviaci\u00f3n est\u00e1ndar como se presenta en la siguiente figura.</p> <p> Figura 6.3 Curva con forma de campana de la distribuci\u00f3n normal</p>"},{"location":"capitulo6/#distribucion-de-probabilidad-normal-estandar","title":"Distribuci\u00f3n de probabilidad normal est\u00e1ndar\u00b6","text":"<p>Se dice que una variable aleatoria con una media de cero y una desviaci\u00f3n est\u00e1ndar de uno tiene una distribuci\u00f3n normal est\u00e1ndar. La letra $z$ se usa com\u00fanmente para designar esta variable aleatoria normal.</p> <p>La figura 6.5 muestra la gr\u00e1fica general de la distribuci\u00f3n normal est\u00e1ndar.</p>"},{"location":"capitulo6/#notas","title":"NOTAS\u00b6","text":"<p>Para mas accesibilidad, tenemos Pydroid 3, esta te permite ejecutar c\u00f3digo Python en dispositivos Android. Con un entorno de desarrollo completo, incluyendo editor y consola interactiva.</p> <p>Se te ofrece un ejemplo de como se puede ejecutar la funci\u00f3n gaussiana utilizando la aplicaci\u00f3n: haz click aqu\u00ed</p>"},{"location":"capitulo6/#calculo-de-probabilidades-para-culaquier-distribucion-de-probabilidad-normal","title":"C\u00e1lculo de probabilidades para culaquier distribuci\u00f3n de probabilidad normal\u00b6","text":""},{"location":"capitulo6/#el-problema-de-llantaxltda","title":"El problema de LLANTAX<sub>Ltda</sub>\u00b6","text":""},{"location":"capitulo6/#ejercicios","title":"Ejercicios\u00b6","text":""},{"location":"capitulo6/#63-aproximacion-normal-de-las-probabilidades-binomiales","title":"6.3 Aproximaci\u00f3n normal de las probabilidades binomiales\u00b6","text":""},{"location":"capitulo6/#64-distribucion-de-probabilidad-exponencial","title":"6.4 Distribuci\u00f3n de probabilidad exponencial\u00b6","text":""},{"location":"capitulo6/#calculo-de-probabilidades-para-la-distribucion-exponencial","title":"C\u00e1lculo de probabilidades para la distribuci\u00f3n exponencial\u00b6","text":""},{"location":"capitulo6/#relacion-entre-las-distribuciones-de-poisson-y-exponencial","title":"Relaci\u00f3n entre las distribuciones de Poisson y exponencial\u00b6","text":""},{"location":"capitulo6/#ejercicios","title":"Ejercicios\u00b6","text":""}]}